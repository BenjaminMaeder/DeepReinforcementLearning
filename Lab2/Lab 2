
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "This project was developed by Peter Chen, Rocky Duan, Pieter Abbeel for the Berkeley Deep RL Bootcamp, August 2017.\n",
    "Bootcamp website with slides and lecture videos: https://sites.google.com/view/deep-rl-bootcamp/.\n",
    "\n",
    "Code adapted from Stanford CS231N materials: http://cs231n.stanford.edu/\n",
    "\"\"\"\n",
    "\n",
    "\n",
    "# note to properly run this lab, you should execute all code blocks sequentially\n",
    "import chainer\n",
    "import chainer.functions as F\n",
    "import chainer.links as L\n",
    "from chainer import training\n",
    "from chainer.training import extensions\n",
    "\n",
    "from collections import namedtuple, defaultdict, deque\n",
    "\n",
    "import numpy as np\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction to Chainer\n",
    "\n",
    "Chainer can be understood as Numpy plus the ability to record the computation graph of numerical operations to enable Automatic Differentiation. (Chainer actually also offers many other things; for example, a Numpy equivalent library that runs on GPU, but we will ignore them for now)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's illustrate how Chainer works by a simple 1D regression task.\n",
    "\n",
    "Suppose we have observations from the following model $y = w x + b + \\epsilon$ where $\\epsilon \\sim \\mathcal{N}(0, 0.1)$ and the task is to estimate the linear model parameters $w, b$ from data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# first generate some observations\n",
    "true_a = 1.3\n",
    "true_b = 0.4\n",
    "data_x = (np.arange(100) / 99.0 - .5).astype(np.float32) # Chainer assumes all the cpu computation is done in float32\n",
    "data_y = (data_x * true_a + true_b + np.random.randn(*data_x.shape) * 0.1).astype(np.float32)\n",
    "_ = plt.scatter(data_x, data_y, c='b')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Chainer provides an abstraction called `Link` that describe some computation and keeps track of parameters for it. For instance, a `Linear` link describes a linear map on input and keeps track of `w` and bias `b`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "w: variable W([[ 0.35864982]])\n",
      "b: variable b([ 0.])\n",
      "Operations on chainer.Variable: variable([[ 123.35865021]]), type: <class 'chainer.variable.Variable'>\n",
      "numpy arrays: [[ 0.35864982]] [[ 123.35865021]]\n"
     ]
    }
   ],
   "source": [
    "model = L.Linear(in_size=1, out_size=1) # input is 1D data and output is also 1D data\n",
    "\n",
    "# Chainer will randomly initialize `w` and `b` for us.\n",
    "# we can take a look at their values\n",
    "print(\"w:\", model.W)\n",
    "print(\"b:\", model.b)\n",
    "\n",
    "# model.W and model.b have type `chainer.Variable`, \n",
    "#   which is a wrapper around Numpy array\n",
    "assert isinstance(model.W, chainer.Variable)\n",
    "\n",
    "# operations that involve `chainer.Variable` will produce\n",
    "#   `chainer.Variable` and this records the computation graph\n",
    "var_result = model.W + 123 # some random computation\n",
    "print(\"Operations on chainer.Variable: %s, type: %s\" % (var_result, type(var_result)))\n",
    "\n",
    "# the underlying numpy array can be accessed by `data` attribute\n",
    "print(\"numpy arrays:\", model.W.data, var_result.data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# A chainer link is a callable object. calling it performs the\n",
    "#   forward computation. (in this case, it performs Wx + b)\n",
    "model_y = model(data_x[:, None]) # chainer's link usually assumes input is [Batch Size, Input Dimension]\n",
    "# `model_y` is a chainer variable so we use `.data` to access its numpy array for plotting\n",
    "\n",
    "# we can plot the model's current fit in red. it should be terrible because we haven't trained it yet\n",
    "_ = plt.plot(data_x, model_y.data[:,0], c='r')\n",
    "_ = plt.scatter(data_x, data_y, c='b')\n",
    "_ = plt.title(\"Initial model\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "loss variable(0.21986638009548187)\n",
      "dloss/dW [[-0.14970335]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[-0.14970335]], dtype=float32)"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# now let's walk through how to perform forward computation\n",
    "#  and use AD to get gradients\n",
    "\n",
    "# first we clear the gradients that are stored in the model\n",
    "model.cleargrads()\n",
    "# as we have seen we can perform forward computation by calling the link\n",
    "model_y = model(data_x[:, None])\n",
    "\n",
    "# remember that `model_y` is a chainer variable. to operate on chainer variable\n",
    "#    we will use functions from chainer.functions to operate on those objects.\n",
    "loss = F.mean(F.square(model_y - data_y[:, None]))\n",
    "# `loss` is a scalar chainer variable\n",
    "assert isinstance(loss, chainer.Variable)\n",
    "print(\"loss\", loss)\n",
    "# calculating gradients d loss /d params is as simple as\n",
    "loss.backward()\n",
    "\n",
    "# we can inspect the gradient of loss with respect to W\n",
    "print(\"dloss/dW\", model.W.grad)\n",
    "model.W.grad"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we know how to calculate gradients, we can code up a simple loop to perform gradient descent to train this model:\n",
    "\n",
    "(Hint: if you run into weird problems, maybe the state has been messed up and you can try re-runing all the code blocks from the beginning)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<chainer.links.connection.linear.Linear object at 0x0000021C3F709438>\n",
      "Itr 0 loss: variable(0.33760443329811096)\n",
      "Itr 25 loss: variable(0.011036694049835205)\n",
      "Itr 50 loss: variable(0.008901283144950867)\n",
      "Itr 75 loss: variable(0.008876156993210316)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# now we can perform gradient descent to improve this model\n",
    "model = L.Linear(in_size=1, out_size=1)\n",
    "losses = []\n",
    "print(model)\n",
    "learning_rate = 0.5\n",
    "for i in range(100):\n",
    "    model.cleargrads()\n",
    "    loss = F.mean(F.square(model(data_x[:, None]) - data_y[:, None]))\n",
    "    losses.append(float(loss.data))\n",
    "    ## *** YOUR CODE HERE TO PERFORM GRADIENT DESCENT ***\n",
    "    ## Hint: you could access gradients with model.W.grad, model.b.grad\n",
    "    ## Hint2: you could write data into a parameter with model.W.data[:] = some_numpy_array\n",
    "    ## Hint3: if your model doesn't learn, remember to try different learning rate\n",
    "    \n",
    "    loss.backward()\n",
    "\n",
    "    \n",
    "    model.W.data -= learning_rate*model.W.grad\n",
    "    model.b.data -= learning_rate*model.b.grad\n",
    "    \n",
    "    \n",
    "    if i % 25 == 0:\n",
    "        print(\"Itr\", i, \"loss:\", loss)\n",
    "plt.plot(np.array(losses))\n",
    "plt.title(\"Learning curve\")\n",
    "plt.figure()\n",
    "plt.plot(data_x, model(data_x[:, None])[:,0].data, c='r')\n",
    "plt.scatter(data_x, data_y, c='b')\n",
    "_ = plt.title(\"Trained model fitness\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train your first deep model\n",
    "\n",
    "Now we have learned the basics of Chainer. We can use it to train a deep model to classify MNIST digits. We will train a model on the MNIST dataset because the dataset is small.\n",
    "\n",
    "First we load the data and see what the images look like:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Downloading from http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz...\n",
      "Downloading from http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz...\n",
      "Downloading from http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz...\n",
      "Downloading from http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz...\n",
      "train[i][0] is the ith image that's flattened, and has shape: (784,)\n",
      "train[i][1] is the ith image's label, such as: 3\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAP8AAAEICAYAAACQ6CLfAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4wLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvqOYd8AAAEQ1JREFUeJzt3XuQVOWdxvHvw0VQVAKLAqsoqOxGNqmQZBQrGINxo8YqV1NGC2p12cSEVEU3m1pNrUVVopuKtZaJSYwmriQSUaNZa43BKGV0qTVEXYmji4JBvCJeEFS8gBdu89s/urFGnH576D7dp533+VRNTc/5ncuPZp453f2e7lcRgZnlZ1DZDZhZORx+s0w5/GaZcvjNMuXwm2XK4TfLlMOfMUl3SfpKu7e1zuDwDwCSVkv627L7qEXSTEmrJL0uab2kBZL2Lruv3Dn81g73ANMjYiRwEDAE+F65LZnDP4BJGiXpVkkvSXq1env/nVY7WNKfqmflhZJG99r+CEn3SnpN0kOSZjTSR0Q8GxEv91q0HTikkX1ZcRz+gW0Q8EvgQOAA4G3g8p3W+Qfgy8BfAtuAnwBI2g+4jcoZejRwLnCTpH12PoikA6p/IA6o1YikIyW9DmwETgF+3Nw/zZrl8A9gEfFKRNwUEW9FxEbgQuAzO612bUSsiIg3gW8Dp0kaDJwOLIqIRRHRExF3At3ACX0cZ01EfCgi1iR6ubv6sH9/4PvA6kL+kdYwh38Ak7SHpCslPSPpDWAJ8KFquHd4ttftZ4ChwBgqjxZOrZ7RX5P0GnAkML6ZniLieeB24NfN7MeaN6TsBqylzgH+GpgWES9Kmgr8H6Be60zodfsAYCvwMpU/CtdGxFdb0NcQ4OAW7Nd2gc/8A8dQScN7fQ0B9qLyPP+16gt55/ex3emSpkjaA/gu8F8RsR24DjhR0nGSBlf3OaOPFwzrkvT31dcFJOlAKk8/Fjf8L7VCOPwDxyIqQd/xdQGVF9V2p3Imv4/Kw+2dXQtcDbwIDAe+AZVX6IGTgLnAS1QeCXyLPn5nqsHelHjBbwpwL7CJyrDfKqAVjyhsF8gf5mGWJ5/5zTLl8JtlyuE3y5TDb5apto7z76ZhMZwR7TykWVbe4U22xGbVX7PJ8Es6HrgUGAz8IiIuSq0/nBFM0zHNHNLMEpZG/y+faPhhf/US0Z8Cn6cyjjtL0pRG92dm7dXMc/7DgSci4qmI2ELlWu2TimnLzFqtmfDvx3vfFPJcddl7SJojqVtS91Y2N3E4MytSM+Hv60WF910uGBHzIqIrIrqGMqyJw5lZkZoJ/3O89x1h+wMvNNeOmbVLM+G/H5gsaZKk3YCZwC3FtGVmrdbwUF9EbJN0NvB7KkN98yPikcI6M7OWamqcPyIWUXkrqZl9wPjyXrNMOfxmmXL4zTLl8JtlyuE3y5TDb5Yph98sUw6/WaYcfrNMOfxmmXL4zTLl8JtlyuE3y5TDb5Yph98sUw6/WaYcfrNMOfxmmXL4zTLl8JtlyuE3y5TDb5Yph98sUw6/WaYcfrNMOfxmmXL4zTLl8JtlyuE3y1RTs/R2ksGjRiXrz555aLI+5J30/l+buqVmbeietWsAd0+/Iln/8pNfTNYfe3GfZL2Vtq3fPVmftHBbsj5k8QNFtmMFair8klYDG4HtwLaI6CqiKTNrvSLO/EdHxMsF7MfM2sjP+c0y1Wz4A7hD0gOS5vS1gqQ5kroldW9lc5OHM7OiNPuwf3pEvCBpX+BOSY9GxJLeK0TEPGAewN4aHU0ez8wK0tSZPyJeqH5fD9wMHF5EU2bWeg2HX9IISXvtuA0cC6woqjEza61mHvaPBW6WtGM/10fE7YV01YCV/z45WX/ixMvb1Elf0mPlCyfflt48/U8r1bZTtifrP3n1wzVr8247NrntIde+mqz3rHg0Wbe0hsMfEU8BHyuwFzNrIw/1mWXK4TfLlMNvlimH3yxTDr9ZpgbMW3q/d/RNpR172Zb021oveeG4NnXyfkufnpisT5u0OlmfvOf6ZP07Y5Yn6/8y6vHatdNr1wCmL/96sj7SV5U0xWd+s0w5/GaZcvjNMuXwm2XK4TfLlMNvlimH3yxTA2ac/7rT0m8PvewjI5P1USteb/jYgza+naxve2p1w/tu1iGk3xb7Sp3tX/uLscn67+57Jlk/cY836hyhtldOSH+e+sjrGt614TO/WbYcfrNMOfxmmXL4zTLl8JtlyuE3y5TDb5apATPO3/PQymR95EN1tm/m2E1s2+nWzqz90dsAJ+7x3w3v+9We9PURE+YPbnjfVp/P/GaZcvjNMuXwm2XK4TfLlMNvlimH3yxTDr9ZpgbMOL/1bdDw4cn64/PT4/j3fvr7dY6Qnn48ZeYZ/5SsD73rgYb3bfXVPfNLmi9pvaQVvZaNlnSnpMer30e1tk0zK1p/HvZfDRy/07LzgMURMRlYXP3ZzD5A6oY/IpYAG3ZafBKwoHp7AXBywX2ZWYs1+oLf2IhYC1D9vm+tFSXNkdQtqXsrmxs8nJkVreWv9kfEvIjoioiuoQxr9eHMrJ8aDf86SeMBqt/TU7maWcdpNPy3ALOrt2cDC4tpx8zape44v6QbgBnAGEnPAecDFwE3SjoTWAOc2somLe3NU6bVrL0y863ktqs+Nb/O3tPj+Jsi/TrO9MvPqVmbcH/6QxYG8uckdIK64Y+IWTVKxxTci5m1kS/vNcuUw2+WKYffLFMOv1mmHH6zTPktvR8AW4/tStbvuPSymrVhau1/cU9Esr7ns7UH7GLbtqLbsV3gM79Zphx+s0w5/GaZcvjNMuXwm2XK4TfLlMNvlimP838APP1FJeutHstP2XtQ+qPB77n4ZzVrc8/9RHLbmxYfkawfdPM7ybruWZas585nfrNMOfxmmXL4zTLl8JtlyuE3y5TDb5Yph98sU4o678cu0t4aHdPkD/3dVZtPOCxZ3+Nbz9esXTAxPaXCJ3cb3FBPnWAb25P1D9/29Zq1KRe+mN73M8821FPZlsZi3ogN6QtDqnzmN8uUw2+WKYffLFMOv1mmHH6zTDn8Zply+M0y5XH+AW7woZOT9S3j9krW3xy/W7L+yt+lpwB/5NO/rFkbRL+Go1viS2tmJOvrpr+Z3kFP+hqDshQ6zi9pvqT1klb0WnaBpOclLat+ndBMw2bWfv152H81cHwfy38UEVOrX4uKbcvMWq1u+CNiCbChDb2YWRs184Lf2ZIerj4tGFVrJUlzJHVL6t7K5iYOZ2ZFajT8VwAHA1OBtcAltVaMiHkR0RURXUMZ1uDhzKxoDYU/ItZFxPaI6AF+DhxebFtm1moNhV/S+F4/fgFYUWtdM+tMdcf5Jd0AzADGAOuA86s/TwUCWA18LSLW1juYx/nzs/7sT9WsffZL9yW3vXhcd9Ht9NuhC85K1ifN/d82dbJrdmWcv+5sDxExq4/FV+1yV2bWUXx5r1mmHH6zTDn8Zply+M0y5fCbZcpTdFtL7Xv5vTVrj1yZfrvwV/74mWT9FxP+0FBP/TIp/VblgcBnfrNMOfxmmXL4zTLl8JtlyuE3y5TDb5Yph98sUx7nt9LE1i3J+l3LP5beQQvH+fXkHi3bd6fwmd8sUw6/WaYcfrNMOfxmmXL4zTLl8JtlyuE3y5TH+dtgyEETk/VVZ41L1kc+lv4k5jFXdubHSNejIelfv2lTnmzZsd+O9DUG45Z25hTcRfKZ3yxTDr9Zphx+s0w5/GaZcvjNMuXwm2XK4TfLVN1xfkkTgGuAcUAPMC8iLpU0GvhPYCKVabpPi4hXW9dq5xoy6cBk/aiFjyTrt4z+TbJ+4tTjkvVOHpEeMvGAmrU/n5e+vuGJif9RdDvv+umrH03Wh//uTy07dqfoz5l/G3BORBwKHAGcJWkKcB6wOCImA4urP5vZB0Td8EfE2oh4sHp7I7AS2A84CVhQXW0BcHKrmjSz4u3Sc35JE4GPA0uBsRGxFip/IIB9i27OzFqn3+GXtCdwE/DNiHhjF7abI6lbUvdWNjfSo5m1QL/CL2koleD/KiJ2vDq1TtL4an08sL6vbSNiXkR0RUTXUIYV0bOZFaBu+CUJuApYGRE/7FW6BZhdvT0bWFh8e2bWKv15S+904AxguaRl1WVzgYuAGyWdCawBTm1Ni51v/WXpRzTnjl7V1P63Ttk/WR/y4Ds1az0bNzZ17EF77ZWsP/Zvf5Os33HKD2rWJg5p7uOxByt97np666aatdu+fXRy290Z+EN9dcMfEXcDtd5Qfkyx7ZhZu/gKP7NMOfxmmXL4zTLl8JtlyuE3y5TDb5Ypf3R3Ad5ZMia9wseb2//t11+VrH/35dpvT33yzX2aOvbBI15K1m8d87M6e2jdVNepcXyAM845p2ZtxG+XFt3OB47P/GaZcvjNMuXwm2XK4TfLlMNvlimH3yxTDr9ZpjzOX4D9F21I1g87clayfv8nb2jq+N8Zs7x2sc4lCGWqN032R2/9RrI+8eaeZH3E7z2Wn+Izv1mmHH6zTDn8Zply+M0y5fCbZcrhN8uUw2+WKY/zF6BnxaPJ+tiZ6fe0Hzb7rGR901FvJet6svb+j/rcw8lt6/nDU4c0tf2eS2r3Nnplevq2v7pr4H92fpl85jfLlMNvlimH3yxTDr9Zphx+s0w5/GaZcvjNMqWISK8gTQCuAcYBPcC8iLhU0gXAV4EdH+w+NyIWpfa1t0bHNHlWb7NWWRqLeSM2qD/r9ucin23AORHxoKS9gAck3Vmt/SgiftBoo2ZWnrrhj4i1wNrq7Y2SVgL7tboxM2utXXrOL2kilcmndnw+0tmSHpY0X9KoGtvMkdQtqXsr6cs5zax9+h1+SXsCNwHfjIg3gCuAg4GpVB4ZXNLXdhExLyK6IqJrKMMKaNnMitCv8EsaSiX4v4qI3wBExLqI2B4RPcDPgcNb16aZFa1u+CUJuApYGRE/7LV8fK/VvgCsKL49M2uV/rzaPx04A1guaVl12VxglqSpQACrga+1pEMza4n+vNp/N9DXuGFyTN/MOpuv8DPLlMNvlimH3yxTDr9Zphx+s0w5/GaZcvjNMuXwm2XK4TfLlMNvlimH3yxTDr9Zphx+s0w5/GaZqvvR3YUeTHoJeKbXojHAy21rYNd0am+d2he4t0YV2duBEbFPf1Zsa/jfd3CpOyK6SmsgoVN769S+wL01qqze/LDfLFMOv1mmyg7/vJKPn9KpvXVqX+DeGlVKb6U+5zez8pR95jezkjj8ZpkqJfySjpe0StITks4ro4daJK2WtFzSMkndJfcyX9J6SSt6LRst6U5Jj1e/9zlHYkm9XSDp+ep9t0zSCSX1NkHS/0haKekRSf9cXV7qfZfoq5T7re3P+SUNBh4DPgc8B9wPzIqIP7e1kRokrQa6IqL0C0IkHQVsAq6JiI9Ul10MbIiIi6p/OEdFxL92SG8XAJvKnra9OpvU+N7TygMnA/9Iifddoq/TKOF+K+PMfzjwREQ8FRFbgF8DJ5XQR8eLiCXAhp0WnwQsqN5eQOWXp+1q9NYRImJtRDxYvb0R2DGtfKn3XaKvUpQR/v2AZ3v9/Bwl3gF9COAOSQ9ImlN2M30YGxFrofLLBOxbcj87qzttezvtNK18x9x3jUx3X7Qywt/X1F+dNN44PSI+AXweOKv68Nb6p1/TtrdLH9PKd4RGp7svWhnhfw6Y0Ovn/YEXSuijTxHxQvX7euBmOm/q8XU7Zkiufl9fcj/v6qRp2/uaVp4OuO86abr7MsJ/PzBZ0iRJuwEzgVtK6ON9JI2ovhCDpBHAsXTe1OO3ALOrt2cDC0vs5T06Zdr2WtPKU/J912nT3ZdyhV91KOPHwGBgfkRc2PYm+iDpICpne6jMYHx9mb1JugGYQeUtn+uA84HfAjcCBwBrgFMjou0vvNXobQaVh67vTtu+4zl2m3s7EvgjsBzoqS6eS+X5dWn3XaKvWZRwv/nyXrNM+Qo/s0w5/GaZcvjNMuXwm2XK4TfLlMNvlimH3yxT/w9XDMitmCMwZQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train, test = chainer.datasets.get_mnist()\n",
    "# use train[data_point_index] to access data\n",
    "print(\"train[i][0] is the ith image that's flattened, and has shape:\", train[12][0].shape)\n",
    "print(\"train[i][1] is the ith image's label, such as:\", train[12][1])\n",
    "# here we visualize two of them\n",
    "plt.imshow(train[12][0].reshape([28, 28,]))\n",
    "plt.title(\"Label: %s\" % train[12][1])\n",
    "plt.figure()\n",
    "plt.imshow(train[42][0].reshape([28, 28,]))\n",
    "_ = plt.title(\"Label: %s\" % train[42][1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we will provide some boilerplate code and train a linear classifier as an example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.125; loss: 2.50304079056\n",
      "accuracy: 0.8625; loss: 0.564959187508\n",
      "accuracy: 0.8925; loss: 0.479897476435\n",
      "accuracy: 0.885; loss: 0.384544897377\n",
      "accuracy: 0.915; loss: 0.342601635754\n",
      "accuracy: 0.8975; loss: 0.349747369289\n",
      "accuracy: 0.885; loss: 0.409698887169\n",
      "accuracy: 0.91; loss: 0.362917580009\n",
      "accuracy: 0.92; loss: 0.293132980168\n",
      "accuracy: 0.9; loss: 0.375784979463\n",
      "accuracy: 0.905; loss: 0.278993033469\n",
      "accuracy: 0.9175; loss: 0.310299986303\n",
      "accuracy: 0.895; loss: 0.354688770473\n",
      "accuracy: 0.9125; loss: 0.369913563728\n",
      "accuracy: 0.9025; loss: 0.345520782471\n",
      "accuracy: 0.92; loss: 0.268177085519\n",
      "accuracy: 0.92; loss: 0.289943566918\n",
      "accuracy: 0.92; loss: 0.267333188355\n",
      "accuracy: 0.8975; loss: 0.344296744466\n",
      "accuracy: 0.8925; loss: 0.337183906436\n",
      "accuracy: 0.905; loss: 0.353583359718\n",
      "accuracy: 0.9275; loss: 0.314473261833\n",
      "accuracy: 0.905; loss: 0.281501327455\n",
      "accuracy: 0.9075; loss: 0.292442364395\n",
      "accuracy: 0.9275; loss: 0.271261479557\n",
      "accuracy: 0.915; loss: 0.258744972944\n"
     ]
    }
   ],
   "source": [
    "def run(model, batchsize=16, num_epochs=2):\n",
    "    \n",
    "    optimizer = chainer.optimizers.Adam() # we will use chainer's Adam implementation instead of writing our own gradient based optimization\n",
    "    optimizer.setup(model)\n",
    "    \n",
    "    stats = defaultdict(lambda: deque(maxlen=25))\n",
    "    for epoch in range(num_epochs):\n",
    "        train_iter = chainer.iterators.SerialIterator(train, batchsize, repeat=False, shuffle=True)\n",
    "        test_iter = chainer.iterators.SerialIterator(test, batchsize, repeat=False, shuffle=False)\n",
    "        \n",
    "        for itr, batch in enumerate(train_iter):\n",
    "            xs = np.concatenate([datum[0][None, :] for datum in batch])\n",
    "            ys = np.array([datum[1] for datum in batch])\n",
    "\n",
    "            logits = model(xs)\n",
    "\n",
    "            loss = F.softmax_cross_entropy(logits, ys)\n",
    "            model.cleargrads()\n",
    "            loss.backward()\n",
    "            optimizer.update()\n",
    "            \n",
    "            # calculate stats\n",
    "            stats[\"loss\"].append(float(loss.data))\n",
    "            stats[\"accuracy\"].append(float((logits.data.argmax(1) == ys).sum() / batchsize))\n",
    "            if itr % 300 == 0:\n",
    "                print(\"; \".join(\"%s: %s\" % (k, np.mean(vs)) for k, vs in stats.items()))\n",
    "\n",
    "# try a simple linear model\n",
    "run(L.Linear(None, 10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we will try to improve performance by training an MLP instead. A partial implementation is provided for you to fill in:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.0625; loss: 2.46682453156\n",
      "accuracy: 0.825; loss: 0.630960577726\n",
      "accuracy: 0.9; loss: 0.360144178271\n",
      "accuracy: 0.915; loss: 0.293309667706\n",
      "accuracy: 0.9175; loss: 0.243787847757\n",
      "accuracy: 0.9025; loss: 0.303641338646\n",
      "accuracy: 0.945; loss: 0.234546657801\n",
      "accuracy: 0.95; loss: 0.21599093169\n",
      "accuracy: 0.9325; loss: 0.215736034513\n",
      "accuracy: 0.9425; loss: 0.19298216939\n",
      "accuracy: 0.945; loss: 0.208931932151\n",
      "accuracy: 0.9275; loss: 0.228774641156\n",
      "accuracy: 0.9725; loss: 0.144196992517\n",
      "accuracy: 0.95; loss: 0.18372646153\n",
      "accuracy: 0.955; loss: 0.13742869556\n",
      "accuracy: 0.9375; loss: 0.150678778291\n",
      "accuracy: 0.9575; loss: 0.165121055245\n",
      "accuracy: 0.9525; loss: 0.148270180225\n",
      "accuracy: 0.9725; loss: 0.110782767534\n",
      "accuracy: 0.9725; loss: 0.0823058307171\n",
      "accuracy: 0.9675; loss: 0.119388193488\n",
      "accuracy: 0.95; loss: 0.167229778767\n",
      "accuracy: 0.965; loss: 0.100753335953\n",
      "accuracy: 0.9625; loss: 0.131165284514\n",
      "accuracy: 0.9675; loss: 0.114250488281\n",
      "accuracy: 0.9625; loss: 0.124719848037\n"
     ]
    }
   ],
   "source": [
    "class MLP(chainer.Chain): # MLP is a multilayer perceptron\n",
    "\n",
    "    def __init__(self, n_units, n_out):\n",
    "        super(MLP, self).__init__()\n",
    "        with self.init_scope():\n",
    "            # the size of the inputs to each layer will be inferred\n",
    "            self.l1 = L.Linear(None, n_units)  # n_in -> n_units\n",
    "            self.l2 = L.Linear(None, n_units)  # n_units -> n_units\n",
    "            self.l3 = L.Linear(None, n_out)  # n_units -> n_out\n",
    "\n",
    "    def __call__(self, x):\n",
    "        # *** YOUR CODE HERE TO BUILD AN MLP W/ self.l1, self.l2, self.l3 ***\n",
    "        x = F.sigmoid(self.l1(x))#first layer\n",
    "        x = F.sigmoid(self.l2(x))#second layer\n",
    "        x = self.l3(x)#output\n",
    "        return x\n",
    "        # Hint: you should make use of non-linearities / activation functions\n",
    "        #     https://docs.chainer.org/en/stable/reference/functions.html#activation-functions\n",
    "        raise NotImplementedError()\n",
    "run(MLP(200, 10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next you should try to implement logging test loss and see if the model is overfitting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "accuracy: 0.125; loss: 2.46960759163\n",
      "accuracy: 0.82; loss: 0.624884361029\n",
      "accuracy: 0.9025; loss: 0.360504755378\n",
      "accuracy: 0.9225; loss: 0.262705806494\n",
      "accuracy: 0.9275; loss: 0.232269071341\n",
      "accuracy: 0.9; loss: 0.342205162048\n",
      "accuracy: 0.94; loss: 0.226253433824\n",
      "accuracy: 0.915; loss: 0.29725666225\n",
      "accuracy: 0.9125; loss: 0.243943879604\n",
      "accuracy: 0.93; loss: 0.219373792708\n",
      "accuracy: 0.9475; loss: 0.171774392128\n",
      "accuracy: 0.935; loss: 0.223409476578\n",
      "accuracy: 0.9375; loss: 0.222163057327\n",
      "accuracy: 0.95; loss: 0.139273769557\n",
      "accuracy: 0.9275; loss: 0.204066659212\n",
      "accuracy: 0.955; loss: 0.125167305768\n",
      "accuracy: 0.95; loss: 0.137372402847\n",
      "accuracy: 0.97; loss: 0.111475832462\n",
      "accuracy: 0.9525; loss: 0.151010400951\n",
      "accuracy: 0.9575; loss: 0.134647907913\n",
      "accuracy: 0.9475; loss: 0.199485819042\n",
      "accuracy: 0.965; loss: 0.12123409301\n",
      "accuracy: 0.9725; loss: 0.0819953000546\n",
      "accuracy: 0.975; loss: 0.120456190705\n",
      "accuracy: 0.97; loss: 0.092969968915\n",
      "accuracy: 0.9775; loss: 0.107619660497\n"
     ]
    }
   ],
   "source": [
    "def better_run(model, batchsize=16, num_epochs=2):\n",
    "\n",
    "    optimizer = chainer.optimizers.Adam() # we will use chainer's Adam implementation instead of writing our own gradient based optimization\n",
    "    optimizer.setup(model)\n",
    "    \n",
    "    stats = defaultdict(lambda: deque(maxlen=25))\n",
    "    for epoch in range(num_epochs):\n",
    "        train_iter = chainer.iterators.SerialIterator(train, batchsize, repeat=False, shuffle=True)\n",
    "        for itr, batch in enumerate(train_iter):\n",
    "            xs = np.concatenate([datum[0][None, :] for datum in batch])\n",
    "            ys = np.array([datum[1] for datum in batch])\n",
    "\n",
    "            logits = model(xs)\n",
    "\n",
    "            loss = F.softmax_cross_entropy(logits, ys)\n",
    "            model.cleargrads()\n",
    "            loss.backward()\n",
    "            optimizer.update()\n",
    "            \n",
    "            # calculate stats\n",
    "            stats[\"loss\"].append(float(loss.data))\n",
    "            stats[\"accuracy\"].append(float((logits.data.argmax(1) == ys).sum() / batchsize))\n",
    "            if itr % 300 == 0:\n",
    "                test_iter = chainer.iterators.SerialIterator(test, batchsize, repeat=False, shuffle=False)\n",
    "                # *** YOUR CODE implement logging of stats on test set ***\n",
    "                print(\"; \".join(\"%s: %s\" % (k, np.mean(vs)) for k, vs in stats.items()))\n",
    "\n",
    "better_run(MLP(200, 10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Try different variants!\n",
    "\n",
    "- Does using a ConvNet improve performance (reduce overfitting?)\n",
    "- Try changing the learning rate and observe the effect\n",
    "- Does the model train if you give it correlated gradients? (consecutively sample many batches of \"1\", then many batches of \"2\", ... etc"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:deeprlbootcamp]",
   "language": "python",
   "name": "conda-env-deeprlbootcamp-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
